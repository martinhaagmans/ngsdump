<<begin , echo=FALSE>>=
library(ggplot2) 
library(reshape2)
library(knitr)
library(plyr)
library(RColorBrewer)
datum <- date()
@

<< covdistribution , echo=FALSE , eval = FALSE >>=
doc <- read.table (paste(samplename, "DoC" ,sep=".") , header = TRUE , sep = "\t")
covplot <- ggplot ( doc , aes (doc$Total_Depth) )
covplot <- covplot + geom_histogram(binwidth = 1 , aes(fill=..count..) )
covplot <- covplot + xlab("Coverage") + ylab("Observaties") + theme(legend.position="none") + theme(plot.title = element_text(size = 30 ))
print(covplot)
@

<< picardtable , echo=FALSE , eval = FALSE >>=
hsmet <- read.table ( paste(samplename , "CaptureMetrics" , sep = ".") , nrows = 1 , skip = 6  ,sep = "\t" , header = TRUE)
insmet <- read.table ( paste(samplename , "InsertSize.out" , sep = ".") , nrows = 1 , skip = 6  , sep = "\t" , header = TRUE , fill = TRUE )
hsmetdf <- data.frame( hsmet$TOTAL_READS , 
                       paste ( round ( 100 * ( 1 - hsmet$PCT_PF_UQ_READS) , 1) , "%" , sep=" ") , 
                       round (hsmet$MEAN_TARGET_COVERAGE , 0)  , 
                       paste (round (100 *  hsmet$PCT_SELECTED_BASES , 0 ), "%" , sep=" ") , 
                       paste (round (insmet$MEAN_INSERT_SIZE , 0) , "bp" , sep =" " ) ,
                       paste ( round ( insmet$STANDARD_DEVIATION , 0)    , "bp" , sep =" " )
                       )
names(hsmetdf) <- c( "# Reads" , "Dups" ,"DP" ,"OnTarget" ,"Insert" ,"Sd" )
kable(hsmetdf, row.names=FALSE , booktabs=TRUE  )
@

<< sangertable , echo=FALSE , eval = FALSE >>=
if (file.info(paste(samplename , "bed_sorted_test.txt" , sep = "."))$size != 0 ){
sangers <- read.table(paste(samplename , "bed_sorted_test.txt" , sep = "."))
sangersdf <- data.frame(sangers$V1 , sangers$V5 , sangers$V6 , sangers$V4)
names(sangersdf) <- c("Chr." , "Start" , "Eind" , "Gen")
kable(sangersdf , row.names=FALSE , booktabs=TRUE  )
} else print("Geen.")
@

<< lowmoz , echo=FALSE , eval = FALSE >>=
      
if (file.exists(paste(samplename , "DoC.below500" , sep = "."))) {
  
  if (file.info(paste(samplename , "DoC.below500" , sep = "."))$size != 0 ){
  lowint <- read.table(paste(samplename , "DoC.below500" , sep = "."))
  names(lowint) <- c ("Chr." , "Start" , "Eind" , "bp" )


  for (i in 1:nrow(lowint)) { 
    intervalcoverage <- list()
 
    for (j in 1:((lowint[i, "Eind"] -lowint[i, "Start"] ) +1 ) ) {
    locus <-  paste  (lowint[i, "Chr."] ,  lowint[i, "Start"] , sep = ":" ) 
    intervalcoverage[[j]]    <- doc [grep (locus , doc$Locus ) , "Total_Depth" ]
    lowint[i, "Start"]  <-  lowint[i, "Start"]  +1 
    }

  lowint [i,5] <- round (mean(unlist(intervalcoverage)) , 0 )
  lowint [i,6] <- round (sd(unlist(intervalcoverage)) , 0 ) 
  lowint$Start <- lowint$Eind - lowint$bp + 1
  }
  
  names(lowint)[5] <- "DP"
  names(lowint)[6] <- "Sd"
  
  kable(lowint , row.names=FALSE , booktabs=TRUE  )
  } else ("Geen.")
} else print("File niet gevonden.")

@

<< mozvar , echo=FALSE , eval = FALSE >>=


### Plot mozaieken
shapes <- c(8,18)
names(shapes) <- c(samplename ,  "dbAMC")

myColors <- brewer.pal(4,"Set1")
names(myColors) <- c("snp" , "del" , "ins" , "ref")

moza<-read.table (paste(samplename, "plot" ,sep="."))
names(moza) <- c("sample","locus","vartype","percentage")
moza <- moza[ order  ( moza$locus , as.vector(moza$vartype )) , ]
mozaplot <- ggplot(moza , aes(x = locus, y = 100* percentage , colour = vartype , shape = sample ) )
mozaplot <- mozaplot + geom_point(size = 5)
mozaplot <- mozaplot +  geom_text(aes(label=ifelse(grepl(samplename, sample) , as.character(100 * round(percentage , 3)) ,'')),hjust=-0.5, vjust=0)
mozaplot <- mozaplot + xlab("") + ylab("Percentage") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
#mozaplot <- mozaplot + scale_shape_manual(name = "" , values=shapes) + scale_colour_manual(name = "Type",values = myColors)
print(mozaplot)  

mozazoom <- moza[moza$percentage <= 0.40 , ]
if (length(moza$percentage) != length(mozazoom$percentage) ) {
 
  zoomplot <- ggplot(mozazoom , aes(x = locus, y = 100* percentage , colour = vartype , shape = sample ) )
  zoomplot <- zoomplot + geom_point(size = 5)
  zoomplot <- zoomplot +  geom_text(aes(label=ifelse(grepl(samplename, sample) , as.character(100 * round(percentage , 3)) ,'')),hjust=-0.15, vjust=-0.1)
  zoomplot <- zoomplot + xlab("") + ylab("Percentage") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
 # zoomplot <- zoomplot + scale_shape_manual(name = "" , values=shapes) + scale_colour_manual(name = "Type",values = myColors)
  print(zoomplot)    
}
 
@

<< mozvartable , echo=FALSE , eval = FALSE >>=
##Maak een tabel voor Mozaieken die niet in de VCF voorkomen
doc <- read.table (paste(samplename, "DoC" ,sep=".") , header = TRUE , sep = "\t")
moza<-read.table (paste(samplename, "plot" ,sep="."))
names(moza) <- c("sample","locus","vartype","percentage")
patmoza <- moza[moza$sample == samplename , ]
colnames(doc)[1] <- "locus"
patmozamerge <- merge(x = patmoza , y = doc, by = "locus", all.x = TRUE)

patmozamerge <- data.frame (patmozamerge$locus , patmozamerge$vartype , paste ( round ( 100 * patmozamerge$percentage , 1) , "%" , sep = " " ) , patmozamerge$Total_Depth )
names(patmozamerge) <- c("Locus" , "VarType" , "Perc." , "DP")
patmozamerge <- subset (patmozamerge , patmozamerge$VarType != "del" )
patmozamerge <- within(patmozamerge, patmozamerge$Locus<-data.frame(do.call('rbind', strsplit(as.character(patmozamerge$Locus), ':', fixed=TRUE))))
patmozamerge <-data.frame ( patmozamerge$patmozamerge$Locus$X1 , patmozamerge$patmozamerge$Locus$X2 , patmozamerge$VarType , patmozamerge$Perc. , patmozamerge$DP)  
names(patmozamerge) <- c("Chr" , "Start"  ,  "VarType" , "Perc." , "DP")

delintervals <- read.table(paste(samplename, "out" ,sep="."))
dels <- patmoza[patmoza$vartype == "del" , ]
names (delintervals) <- c ("Chr" , "Start" , "Eind" , "(bp)" )


for (i in 1:nrow(delintervals)) { 
  delintervalcoverage <- list()
  
  for (j in 1:( (delintervals[i, "Eind"] - delintervals[i, "Start"] ) +1 ) ) {
    
    locus <-  paste  (delintervals[i, "Chr."] ,  delintervals[i, "Start"] , sep = ":" ) 
    
    delintervalcoverage[[j]]    <- dels [grep (locus , dels$locus ) , "percentage" ]
    
    delintervals[i, "Start"]  <-  delintervals[i, "Start"]  +1 
  }
  
  delintervals [i,5] <- paste ( round (100 * mean(unlist(delintervalcoverage)) , 1 ) , "%" , sep = " ") 
  delintervals [i,6] <- round (100 * sd(unlist(delintervalcoverage)) , 1 ) 
  
}

names (delintervals) <- c ("Chr" , "Start" , "Eind" , "(bp)" , "Perc." , "Sd" )
delintervals$VarType <- "del"
delintervals$Start <- delintervals$Eind - delintervals$`(bp)` + 1

out <- rbind.fill(patmozamerge , delintervals)
out <- data.frame ( out$Chr , out$Start , out$Eind , out$`(bp)` , out$VarType , out$DP , out$Perc. , out$Sd)
names (out) <- c ("Chr" , "Start" , "Eind" , "(bp)" , "Var" , "DP" , "Perc." , "Sd" )
out <- out[order(out$Chr , out$Start),]
out[is.na(out)]   <- " " 
kable(out , row.names=FALSE , booktabs=TRUE ) 

@

<< knownpos , echo=FALSE , eval = FALSE  >>=
known <- read.table(  paste(samplename, "DoC.literature.vars" , sep = "." ) , header = TRUE , sep = "\t" )
if (any( ( known$Alt / (known$Ref + known$Alt) )   > 0.01)) {
pos <- subset (known , ( known$Alt / (known$Ref + known$Alt) )  > 0.01)
pos <- data.frame (paste( pos$Gen , pos$Variant ,sep = ":") ,  paste ( round (100 *  ( pos$Ref / (pos$Ref + pos$Alt) )  , 1 ), "%" , sep=" ") ,  paste ( round (100 *  ( pos$Alt / (pos$Ref + pos$Alt) )  , 1 ), "%" , sep=" ") , pos$Ref + pos$Alt )
names (pos) <- c("GenVar" , "Ref" , "Alt" , "DP")
kable(pos, row.names=FALSE , booktabs=TRUE  )
} else print("Geen.")

@

<< knownvars , echo=FALSE , eval = FALSE >>=
known <- read.table(  paste(samplename, "DoC.literature.vars" , sep = "." ) , header = TRUE , sep = "\t" )
knowndf <- data.frame ( paste( known$Gen , known$Variant , sep = ":")   , known$Ref / (known$Ref + known$Alt) , known$Alt / (known$Ref + known$Alt)  )
names (knowndf) <- c("GenVar" , "Ref" , "Alt")
mkdf <- melt(knowndf , id.vars = "GenVar")
knownplot <- ggplot(mkdf , aes(mkdf$GenVar , value , fill =  variable)) + theme_bw()
knownplot <- knownplot + geom_bar( stat="identity") + xlab("") + ylab("Percentage") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_fill_manual(values=c("grey", "red")) 
print(knownplot)
@



<< vcfvar , echo=FALSE , eval = FALSE >>=
vcfvar <- read.table(paste(samplename, "table.annot.coding" ,sep=".") , header = TRUE , sep = "\t")
names(vcfvar) <- c("CHROM" , "POS" , "REF" , "ALT" , "DP" , "GT" , "AD" , "Chromosome" , "StartPosition" , "ReferenceAlternativeAllele" , "rsID" , "MostImportantFeatureGene" , 
              "MostImportantGeneFeature" , "RefGeneFeatures" , "AffectedRefHomGtyNum" , "AffectedHetGtyNum" , "AffectedAltHomGtyNum" , "MaxDBAltAF" , "1kg201204" , 
              "altFreq@dbsnp138" , "ESP6500EA" , "ESP6500AA" , "UniProtFeatureForRefGene" , "GeneDescription" , "Pseudogenes")
dfvcfvar <- data.frame(vcfvar$CHROM , vcfvar$POS , vcfvar$REF , vcfvar$ALT , vcfvar$AD , vcfvar$MostImportantFeatureGene , vcfvar$MostImportantGeneFeature , vcfvar$DP)
dfvcfvar <- transform(dfvcfvar , AD = colsplit(dfvcfvar$vcfvar.AD, pattern = "," , names = c('refreads', 'altreads') ) )
dfvcfvar$AD.altreads <- gsub(",", "+", dfvcfvar$AD.altreads)
for (i in 1:length(dfvcfvar$AD.altreads)) {
  dfvcfvar$AD.altreads[i] <- eval(parse(text = dfvcfvar$AD.altreads[i] )) }

dfvcfvar$AD.altreads <- as.numeric(dfvcfvar$AD.altreads)
dfvcfvar <- data.frame( dfvcfvar$vcfvar.CHROM , dfvcfvar$vcfvar.POS , dfvcfvar$vcfvar.MostImportantFeatureGene , dfvcfvar$vcfvar.MostImportantGeneFeature , dfvcfvar$vcfvar.REF , 
                        dfvcfvar$vcfvar.ALT , paste(round (( 100 * (  dfvcfvar$AD.altreads / ( dfvcfvar$AD.refreads + dfvcfvar$AD.altreads ) ) ) , 0 ) , "%" , sep=" "  ) ,
                        dfvcfvar$AD.refreads + dfvcfvar$AD.altreads , vcfvar$DP )
names(dfvcfvar)<- c("Chr." , "g.Pos" , "Gene" , "Effect" , "Ref" , "Alt" , "VarP." , "VarDP" , "DP" )
kable(dfvcfvar , row.names=FALSE , booktabs=TRUE )
@

<< snpcheck , echo=FALSE , eval = FALSE >>=
if (file.exists(paste(samplename , "snpcheck.com" , sep="."))) {
  snpcheck<- read.table((paste(samplename, "snpcheck.com" ,sep=".") ) , header = TRUE , nrows = length(readLines(paste(samplename, "snpcheck.com" ,sep="."))) - 3)
  kable(snpcheck , row.names=FALSE , booktabs=TRUE ) 
} else  print("SNP check SequencePilot output niet gevonden")

@

<< reftable , echo=FALSE , eval = FALSE >>=
reftable <- read.table(samplename , sep = "\t" , header = TRUE)
reftable <- as.data.frame(lapply(reftable,function(reftable) if(is.character(reftable)|is.factor(reftable)) sub("(.*\\/)([^.]+)", "\\2", reftable) else reftable))
kable(reftable , row.names=FALSE , booktabs=TRUE  )
@

\documentclass[a4paper]{article}
\usepackage[british]{babel}
\usepackage{booktabs}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\graphicspath{ {D:/RProjects/SO/} }

\newcommand*{\titleGP}{\begingroup % Create the command for including the title page in the document
\centering % Center all text
\vspace*{\baselineskip} % White space at the top of the page

\rule{\textwidth}{1.6pt}\vspace*{-\baselineskip}\vspace*{2pt} % Thick horizontal line
\rule{\textwidth}{0.4pt}\\[\baselineskip] % Thin horizontal line

{\LARGE SEQUENCE RAPPORT \\[0.3\baselineskip] \Sexpr{I(samplename)}}\\[0.2\baselineskip] % Title

\rule{\textwidth}{0.4pt}\vspace*{-\baselineskip}\vspace{3.2pt} % Thin horizontal line
\rule{\textwidth}{1.6pt}\\[\baselineskip] % Thick horizontal line
\vspace{10mm}
\scshape % Small caps 
{\large Nimblegen sequence capture voor \\ % Tagline(s) or further description
lokale overgroei bevat de volgende genen:}   \\[\baselineskip] % Tagline(s) or further description

akt1; akt3; mtor; pik3ca; pik3r2; pten; tsc1; tsc2; \par


\vfill % Whitespace between editor names and publisher logo
\includegraphics[scale=0.5]{amclogo} 

{\Large Amsterdam \par} 
\vspace{10mm}
{\scshape \Sexpr{I(datum)}} \\[0.3\baselineskip] % Year published
MARTIN HAAGMANS

\endgroup}

\begin{document}
\titleGP
\thispagestyle{empty}
\newpage
\section{SEQUENCE RESULTATEN}
\subsection{Coverageplot en metrics samenvatting}
<< covdistribution , echo=FALSE , fig.align = "center" , fig.width = 12 , fig.height = 6 , out.width="\\textwidth" >>=
@
\vspace{5mm}
<< picardtable , echo=FALSE , out.width="\\textwidth" >>=
@
\vspace{5mm}

\subsection{Te sangeren fragmenten}
<< sangertable , echo=FALSE , out.width="\\textwidth" >>=
@

\subsection{Basen/fragmenten met onvoldoende coverage voor mozaiekdetectie}
<< lowmoz , echo=FALSE ,  out.width="\\textwidth" >>=
@
\newpage
\section{VARIANTEN EN MOZAIEKEN}
\vspace{5mm}
\subsection{Laag frequente varianten}
<< mozvar , echo=FALSE , fig.align = "center" , fig.width = 12 , fig.height = 6 , out.width="\\textwidth" >>=
@

<< mozvartable , echo=FALSE , out.width="\\textwidth" >>=
@
\newpage

In de literatuur beschreven varianten met meer dan 1\% variant reads:
\\

<< knownpos , echo=FALSE , out.width="\\textwidth"  >>=
@

<< knownvars , echo=FALSE , fig.align = "center" , fig.width = 12 , fig.height = 6 , out.width="\\textwidth" >>=
@

\subsection{HaplotypeCaller varianten}
<< vcfvar , echo=FALSE , out.width="\\textwidth" >>=
@

\newpage
\section{LOG}
\vspace{5mm}
\subsection{SNP check}
<< snpcheck , echo=FALSE , out.width="\\textwidth" >>=
@
\vspace{5mm}
\subsection{Gebruikte referenties en tabellen}
<< reftable , echo=FALSE , out.width="\\textwidth" >>=
@

\end{document}
