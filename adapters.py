number_to_barcodes = {
    1: ('CGTGTAGG', 'GACCTGTA'),
    2: ('CGTGTAGG', 'ATGTAACT'),
    3: ('CGTGTAGG', 'GTTTCAGA'),
    4: ('CGTGTAGG', 'CACAGGAT'),
    5: ('CGTGTAGG', 'TCAAAAAG'),
    6: ('CGTGTAGG', 'CGGTGGTA'),
    7: ('CGTGTAGG', 'TATGCTGC'),
    8: ('CGTGTAGG', 'AGAAGACT'),
    9: ('CGTGTAGG', 'TAGCTGCC'),
    10: ('CGTGTAGG', 'AGCGAATG'),
    11: ('CGTGTAGG', 'GTTGGACT'),
    12: ('CGTGTAGG', 'AAACCGTC'),
    13: ('GACACTAC', 'GACCTGTA'),
    14: ('GACACTAC', 'ATGTAACT'),
    15: ('GACACTAC', 'GTTTCAGA'),
    16: ('GACACTAC', 'CACAGGAT'),
    17: ('GACACTAC', 'TCAAAAAG'),
    18: ('GACACTAC', 'CGGTGGTA'),
    19: ('GACACTAC', 'TATGCTGC'),
    20: ('GACACTAC', 'AGAAGACT'),
    21: ('GACACTAC', 'TAGCTGCC'),
    22: ('GACACTAC', 'AGCGAATG'),
    23: ('GACACTAC', 'GTTGGACT'),
    24: ('GACACTAC', 'AAACCGTC'),
    25: ('TGCATACA', 'GACCTGTA'),
    26: ('TGCATACA', 'ATGTAACT'),
    27: ('TGCATACA', 'GTTTCAGA'),
    28: ('TGCATACA', 'CACAGGAT'),
    29: ('TGCATACA', 'TCAAAAAG'),
    30: ('TGCATACA', 'CGGTGGTA'),
    31: ('TGCATACA', 'TATGCTGC'),
    32: ('TGCATACA', 'AGAAGACT'),
    33: ('TGCATACA', 'TAGCTGCC'),
    34: ('TGCATACA', 'AGCGAATG'),
    35: ('TGCATACA', 'GTTGGACT'),
    36: ('TGCATACA', 'AAACCGTC'),
    37: ('CAGTCTGG', 'GACCTGTA'),
    38: ('CAGTCTGG', 'ATGTAACT'),
    39: ('CAGTCTGG', 'GTTTCAGA'),
    40: ('CAGTCTGG', 'CACAGGAT'),
    41: ('CAGTCTGG', 'TCAAAAAG'),
    42: ('CAGTCTGG', 'CGGTGGTA'),
    43: ('CAGTCTGG', 'TATGCTGC'),
    44: ('CAGTCTGG', 'AGAAGACT'),
    45: ('CAGTCTGG', 'TAGCTGCC'),
    46: ('CAGTCTGG', 'AGCGAATG'),
    47: ('CAGTCTGG', 'GTTGGACT'),
    48: ('CAGTCTGG', 'AAACCGTC'),
    49: ('TGGCACCT', 'GACCTGTA'),
    50: ('TGGCACCT', 'ATGTAACT'),
    51: ('TGGCACCT', 'GTTTCAGA'),
    52: ('TGGCACCT', 'CACAGGAT'),
    53: ('TGGCACCT', 'TCAAAAAG'),
    54: ('TGGCACCT', 'CGGTGGTA'),
    55: ('TGGCACCT', 'TATGCTGC'),
    56: ('TGGCACCT', 'AGAAGACT'),
    57: ('TGGCACCT', 'TAGCTGCC'),
    58: ('TGGCACCT', 'AGCGAATG'),
    59: ('TGGCACCT', 'GTTGGACT'),
    60: ('TGGCACCT', 'AAACCGTC'),
    61: ('CAAGGTGA', 'GACCTGTA'),
    62: ('CAAGGTGA', 'ATGTAACT'),
    63: ('CAAGGTGA', 'GTTTCAGA'),
    64: ('CAAGGTGA', 'CACAGGAT'),
    65: ('CAAGGTGA', 'TCAAAAAG'),
    66: ('CAAGGTGA', 'CGGTGGTA'),
    67: ('CAAGGTGA', 'TATGCTGC'),
    68: ('CAAGGTGA', 'AGAAGACT'),
    69: ('CAAGGTGA', 'TAGCTGCC'),
    70: ('CAAGGTGA', 'AGCGAATG'),
    71: ('CAAGGTGA', 'GTTGGACT'),
    72: ('CAAGGTGA', 'AAACCGTC'),
    73: ('AAAGATAC', 'GACCTGTA'),
    74: ('AAAGATAC', 'ATGTAACT'),
    75: ('AAAGATAC', 'GTTTCAGA'),
    76: ('AAAGATAC', 'CACAGGAT'),
    77: ('AAAGATAC', 'TCAAAAAG'),
    78: ('AAAGATAC', 'CGGTGGTA'),
    79: ('AAAGATAC', 'TATGCTGC'),
    80: ('AAAGATAC', 'AGAAGACT'),
    81: ('AAAGATAC', 'TAGCTGCC'),
    82: ('AAAGATAC', 'AGCGAATG'),
    83: ('AAAGATAC', 'GTTGGACT'),
    84: ('AAAGATAC', 'AAACCGTC'),
    85: ('TGGAGCTG', 'GACCTGTA'),
    86: ('TGGAGCTG', 'ATGTAACT'),
    87: ('TGGAGCTG', 'GTTTCAGA'),
    88: ('TGGAGCTG', 'CACAGGAT'),
    89: ('TGGAGCTG', 'TCAAAAAG'),
    90: ('TGGAGCTG', 'CGGTGGTA'),
    91: ('TGGAGCTG', 'TATGCTGC'),
    92: ('TGGAGCTG', 'AGAAGACT'),
    93: ('TGGAGCTG', 'TAGCTGCC'),
    94: ('TGGAGCTG', 'AGCGAATG'),
    95: ('TGGAGCTG', 'GTTGGACT'),
    96: ('TGGAGCTG', 'AAACCGTC'),
    97: ('CCAGCATA', 'GACCTGTA'),
    98: ('CCAGCATA', 'ATGTAACT'),
    99: ('CCAGCATA', 'GTTTCAGA'),
    100: ('CCAGCATA', 'CACAGGAT'),
    101: ('CCAGCATA', 'TCAAAAAG'),
    102: ('CCAGCATA', 'CGGTGGTA'),
    103: ('CCAGCATA', 'TATGCTGC'),
    104: ('CCAGCATA', 'AGAAGACT'),
    105: ('CCAGCATA', 'TAGCTGCC'),
    106: ('CCAGCATA', 'AGCGAATG'),
    107: ('CCAGCATA', 'GTTGGACT'),
    108: ('CCAGCATA', 'AAACCGTC'),
    109: ('GTGCTTAT', 'GACCTGTA'),
    110: ('GTGCTTAT', 'ATGTAACT'),
    111: ('GTGCTTAT', 'GTTTCAGA'),
    112: ('GTGCTTAT', 'CACAGGAT'),
    113: ('GTGCTTAT', 'TCAAAAAG'),
    114: ('GTGCTTAT', 'CGGTGGTA'),
    115: ('GTGCTTAT', 'TATGCTGC'),
    116: ('GTGCTTAT', 'AGAAGACT'),
    117: ('GTGCTTAT', 'TAGCTGCC'),
    118: ('GTGCTTAT', 'AGCGAATG'),
    119: ('GTGCTTAT', 'GTTGGACT'),
    120: ('GTGCTTAT', 'AAACCGTC'),
    121: ('ACAGTCTC', 'GACCTGTA'),
    122: ('ACAGTCTC', 'ATGTAACT'),
    123: ('ACAGTCTC', 'GTTTCAGA'),
    124: ('ACAGTCTC', 'CACAGGAT'),
    125: ('ACAGTCTC', 'TCAAAAAG'),
    126: ('ACAGTCTC', 'CGGTGGTA'),
    127: ('ACAGTCTC', 'TATGCTGC'),
    128: ('ACAGTCTC', 'AGAAGACT'),
    129: ('ACAGTCTC', 'TAGCTGCC'),
    130: ('ACAGTCTC', 'AGCGAATG'),
    131: ('ACAGTCTC', 'GTTGGACT'),
    132: ('ACAGTCTC', 'AAACCGTC'),
    133: ('TTTCATAG', 'GACCTGTA'),
    134: ('TTTCATAG', 'ATGTAACT'),
    135: ('TTTCATAG', 'GTTTCAGA'),
    136: ('TTTCATAG', 'CACAGGAT'),
    137: ('TTTCATAG', 'TCAAAAAG'),
    138: ('TTTCATAG', 'CGGTGGTA'),
    139: ('TTTCATAG', 'TATGCTGC'),
    140: ('TTTCATAG', 'AGAAGACT'),
    141: ('TTTCATAG', 'TAGCTGCC'),
    142: ('TTTCATAG', 'AGCGAATG'),
    143: ('TTTCATAG', 'GTTGGACT'),
    144: ('TTTCATAG', 'AAACCGTC'),
    145: ('TTACGGTG', 'GACCTGTA'),
    146: ('TTACGGTG', 'ATGTAACT'),
    147: ('TTACGGTG', 'GTTTCAGA'),
    148: ('TTACGGTG', 'CACAGGAT'),
    149: ('TTACGGTG', 'TCAAAAAG'),
    150: ('TTACGGTG', 'CGGTGGTA'),
    151: ('TTACGGTG', 'TATGCTGC'),
    152: ('TTACGGTG', 'AGAAGACT'),
    153: ('TTACGGTG', 'TAGCTGCC'),
    154: ('TTACGGTG', 'AGCGAATG'),
    155: ('TTACGGTG', 'GTTGGACT'),
    156: ('TTACGGTG', 'AAACCGTC'),
    157: ('AATGCAAA', 'GACCTGTA'),
    158: ('AATGCAAA', 'ATGTAACT'),
    159: ('AATGCAAA', 'GTTTCAGA'),
    160: ('AATGCAAA', 'CACAGGAT'),
    161: ('AATGCAAA', 'TCAAAAAG'),
    162: ('AATGCAAA', 'CGGTGGTA'),
    163: ('AATGCAAA', 'TATGCTGC'),
    164: ('AATGCAAA', 'AGAAGACT'),
    165: ('AATGCAAA', 'TAGCTGCC'),
    166: ('AATGCAAA', 'AGCGAATG'),
    167: ('AATGCAAA', 'GTTGGACT'),
    168: ('AATGCAAA', 'AAACCGTC'),
    169: ('AAGAAATC', 'GACCTGTA'),
    170: ('AAGAAATC', 'ATGTAACT'),
    171: ('AAGAAATC', 'GTTTCAGA'),
    172: ('AAGAAATC', 'CACAGGAT'),
    173: ('AAGAAATC', 'TCAAAAAG'),
    174: ('AAGAAATC', 'CGGTGGTA'),
    175: ('AAGAAATC', 'TATGCTGC'),
    176: ('AAGAAATC', 'AGAAGACT'),
    177: ('AAGAAATC', 'TAGCTGCC'),
    178: ('AAGAAATC', 'AGCGAATG'),
    179: ('AAGAAATC', 'GTTGGACT'),
    180: ('AAGAAATC', 'AAACCGTC'),
    181: ('TGCTTTAT', 'GACCTGTA'),
    182: ('TGCTTTAT', 'ATGTAACT'),
    183: ('TGCTTTAT', 'GTTTCAGA'),
    184: ('TGCTTTAT', 'CACAGGAT'),
    185: ('TGCTTTAT', 'TCAAAAAG'),
    186: ('TGCTTTAT', 'CGGTGGTA'),
    187: ('TGCTTTAT', 'TATGCTGC'),
    188: ('TGCTTTAT', 'AGAAGACT'),
    189: ('TGCTTTAT', 'TAGCTGCC'),
    190: ('TGCTTTAT', 'AGCGAATG'),
    191: ('TGCTTTAT', 'GTTGGACT'),
    192: ('TGCTTTAT', 'AAACCGTC'),
    193: ('TAAGGCGA', 'TAGATCGC'),
    194: ('CGTACTAG', 'TAGATCGC'),
    195: ('AGGCAGAA', 'TAGATCGC'),
    196: ('TCCTGAGC', 'TAGATCGC'),
    197: ('GGACTCCT', 'TAGATCGC'),
    198: ('TAGGCATG', 'TAGATCGC'),
    199: ('CTCTCTAC', 'TAGATCGC'),
    200: ('CAGAGAGG', 'TAGATCGC'),
    201: ('GCTACGCT', 'TAGATCGC'),
    202: ('CGAGGCTG', 'TAGATCGC'),
    203: ('AAGAGGCA', 'TAGATCGC'),
    204: ('GTAGAGGA', 'TAGATCGC'),
    205: ('TAAGGCGA', 'CTCTCTAT'),
    206: ('CGTACTAG', 'CTCTCTAT'),
    207: ('AGGCAGAA', 'CTCTCTAT'),
    208: ('TCCTGAGC', 'CTCTCTAT'),
    209: ('GGACTCCT', 'CTCTCTAT'),
    210: ('TAGGCATG', 'CTCTCTAT'),
    211: ('CTCTCTAC', 'CTCTCTAT'),
    212: ('CAGAGAGG', 'CTCTCTAT'),
    213: ('GCTACGCT', 'CTCTCTAT'),
    214: ('CGAGGCTG', 'CTCTCTAT'),
    215: ('AAGAGGCA', 'CTCTCTAT'),
    216: ('GTAGAGGA', 'CTCTCTAT')
    }

adapterid_to_seq = {
    "DI_501": "GACCTGTA",
    "DI_502": "ATGTAACT",
    "DI_503": "GTTTCAGA",
    "DI_504": "CACAGGAT",
    "DI_505": "TCAAAAAG",
    "DI_506": "CGGTGGTA",
    "DI_507": "TATGCTGC",
    "DI_508": "AGAAGACT",
    "DI_509": "TAGCTGCC",
    "DI_510": "AGCGAATG",
    "DI_511": "GTTGGACT",
    "DI_512": "AAACCGTC",
    "DI_701": "CGTGTAGG",
    "DI_702": "GACACTAC",
    "DI_703": "TGCATACA",
    "DI_704": "CAGTCTGG",
    "DI_705": "TGGCACCT",
    "DI_706": "CAAGGTGA",
    "DI_707": "AAAGATAC",
    "DI_708": "TGGAGCTG",
    "DI_709": "CCAGCATA",
    "DI_710": "GTGCTTAT",
    "DI_711": "ACAGTCTC",
    "DI_712": "TTTCATAG",
    "DI_713": "TTACGGTG",
    "DI_714": "AATGCAAA",
    "DI_715": "AAGAAATC",
    "DI_716": "TGCTTTAT",
    "N701": "TAAGGCGA",
    "N702": "CGTACTAG",
    "N703": "AGGCAGAA",
    "N704": "TCCTGAGC",
    "N705": "GGACTCCT",
    "N706": "TAGGCATG",
    "N707": "CTCTCTAC",
    "N708": "CAGAGAGG",
    "N709": "GCTACGCT",
    "N710": "CGAGGCTG",
    "N711": "AAGAGGCA",
    "N712": "GTAGAGGA",
    "N501": "TAGATCGC",
    "N502": "CTCTCTAT"
    }

amc_idt = {
    97: 97,
    98: 110,
    99: 123,
    100: 136,
    101: 149,
    102: 162,
    103: 175,
    104: 188,
    129: 101,
    130: 114,
    131: 127,
    132: 140,
    133: 153,
    134: 166,
    135: 179,
    136: 192,
    161: 105,
    162: 118,
    163: 131,
    164: 144,
    165: 145,
    166: 158,
    167: 171,
    168: 184,
    105: 98,
    106: 111,
    107: 124,
    108: 137,
    109: 150,
    110: 163,
    111: 176,
    112: 189,
    137: 102,
    138: 115,
    139: 128,
    140: 141,
    141: 154,
    142: 167,
    143: 180,
    144: 181,
    169: 106,
    170: 119,
    171: 132,
    172: 133,
    173: 146,
    174: 159,
    175: 172,
    176: 185,
    113: 99,
    114: 112,
    115: 125,
    116: 138,
    117: 151,
    118: 164,
    119: 177,
    120: 190,
    145: 103,
    146: 116,
    147: 129,
    148: 142,
    149: 155,
    150: 168,
    151: 169,
    152: 182,
    177: 107,
    178: 120,
    179: 121,
    180: 134,
    181: 147,
    182: 160,
    183: 173,
    184: 186,
    121: 100,
    122: 113,
    123: 126,
    124: 139,
    125: 152,
    126: 165,
    127: 178,
    128: 191,
    153: 104,
    154: 117,
    155: 130,
    156: 143,
    157: 156,
    158: 157,
    159: 170,
    160: 183,
    185: 108,
    186: 109,
    187: 122,
    188: 135,
    189: 148,
    190: 161,
    191: 174,
    192: 187,
    193: 193,
    194: 194,
    195: 195,
    196: 196,
    197: 197,
    198: 198,
    199: 199,
    200: 200,
    201: 201,
    202: 202,
    203: 203,
    204: 204,
    205: 205,
    206: 206,
    207: 207,
    208: 208,
    209: 209,
    210: 210,
    211: 211,
    212: 212,
    213: 213,
    214: 214,
    215: 215,
    216: 216
    }

barcodes_to_number = dict()
for number, barcodes in number_to_barcodes.items():
    b1, b2 = barcodes
    barcodes_to_number[f'{b1}+{b2}'] = number

seq_to_adapterid = dict()
for adapterid, seq in adapterid_to_seq.items():
    seq_to_adapterid[seq] = adapterid

idt_amc = dict()
for amc, idt in amc_idt.items():
    idt_amc[idt] = amc

def get_barcode_nr_amc(barcodes):
    nr_idt = barcodes_to_number[barcodes]
    if nr_idt > 96:
        nr_amc = idt_amc[nr_idt]
    else:
        nr_amc = nr_idt
    return nr_amc
        
def get_barcode_for_nr_amc(nr_amc):
    if nr_amc > 96:
        nr_idt = amc_idt[nr_amc]
    else:
        nr_idt = nr_amc
    b1, b2 = number_to_barcodes[nr_idt]
    return b1, b2
    
def get_output(query):
    out = str()
    
    if '+' in query:
        out = get_barcode_nr_amc(query)
    try:
        query = int(query)
    except ValueError:
        pass
    else:
        out = str(get_barcode_for_nr_amc(query))
        
    if not out:
        logging.error(f'{query} not recognized')
        sys.exit()
    return out


if __name__ == '__main__':
    import os
    import sys
    import logging
    import argparse
    
    logging.basicConfig(format='%(levelname)s: %(message)s')
    
    parser = argparse.ArgumentParser()
    parser.add_argument("-q", "--query", type=str, 
                        help="Adapter to check", required=True)
                        
    args = parser.parse_args()
    print(get_output(args.query))
    
